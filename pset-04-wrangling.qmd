---
title: Problem set 4
date: 2025-10-05
format: pdf

include-in-header:
  text: |
    \usepackage{fvextra}
    \DefineVerbatimEnvironment{Highlighting}{Verbatim}{
      commandchars=\\\{\}, breaklines, breaknonspaceingroup, breakanywhere
    }
---

In the next problem set, we plan to explore the relationship between COVID-19 death rates and vaccination rates across US states by visually examining their correlation. This analysis will involve gathering COVID-19 related data from the CDC's API and then extensively processing it to merge the various datasets. Since the population sizes of states vary significantly, we will focus on comparing rates rather than absolute numbers. To facilitate this, we will also source population data from the US Census to accurately calculate these rates.

In this problem set we will learn how to extract and wrangle data from the data US Census and CDC APIs.

1.  Get an API key from the US Census at <https://api.census.gov/data/key_signup.html>. You can't share this public key. But your code has to run on a TFs computer. Assume the TF will have a file in their working directory named `census-key.R` with the following one line of code:

```         
census_key <- "A_CENSUS_KEY_THAT_WORKS"
```

Write a first line of code for your problem set that defines `census_key` by running the code in the file `census-key.R`.

```{r}
# runs different R file and makes its variables available in current file 
source("census-key.R")
```

2.  The [US Census API User Guide](https://www.census.gov/content/dam/Census/data/developers/api-user-guide/api-user-guide.pdf) provides details on how to leverage this valuable resource. We are interested in vintage population estimates for years 2021 and 2022. From the documentation we find that the *endpoint* is:

```{r}
url <- "https://api.census.gov/data/2021/pep/population"
```

Use the **httr2** package to construct the following GET request.

```         
https://api.census.gov/data/2021/pep/population?get=POP_2020,POP_2021,NAME&for=state:*&key=YOURKEYHERE
```

Create an object called `request` of class `httr2_request` with this URL as an endpoint. Hint: Print out `request` to check that the URL matches what we want.

```{r}
#| message: false
#| warning: false
library(httr2)
request <- request(url) |>
  req_url_query(
    get = "POP_2020,POP_2021,NAME", # attributes to GET
    `for` = "state:*", # for is required by the API 
    key = census_key
  )
```

3.  Make a request to the US Census API using the `request` object. Save the response to and object named `response`. Check the response status of your request and make sure it was successful. You can learn about *status codes* [here](https://en.wikipedia.org/wiki/List_of_HTTP_status_codes).

```{r}

response <- req_perform(request)
response |> resp_status_desc() # checking response status 
```

4.  Use a function from the **httr2** package to determine the content type of your response.

```{r}
response |> resp_content_type() # checking response data type 
```

5.  Use just one line of code and one function to extract the data into a matrix. Hints: 1) Use the `resp_body_json` function. 2) The first row of the matrix will be the variable names and this OK as we will fix in the next exercise.

```{r}
population <- resp_body_json(response, simplifyVector = TRUE) 
head(population)
```

6.  Examine the `population` matrix you just created. Notice that 1) it is not tidy, 2) the column types are not what we want, and 3) the first row is a header. Convert `population` to a tidy dataset. Remove the state ID column and change the name of the column with state names to `state_name`. Add a column with state abbreviations called `state`. Make sure you assign the abbreviations for DC and PR correctly. Hint: Use the **janitor** package to make the first row the header.

```{r}
#| message: false
#| warning: false
library(tidyverse)
library(janitor)
population <- population |> 
  row_to_names(1) |> # makes first row the header
  as_tibble() |> # convert to tibble
  select(-state) |> # remove state ID column
  rename(state_name = NAME) |> # rename state column to state_name
  pivot_longer(cols = c(POP_2020,POP_2021), names_to = "year", values_to = "state_population") |> # use pivot_longer to tidy
  mutate(year = sub("POP_", "", year)) |> # remove POP_ from year
  mutate(year = as.numeric(year), state_population = as.numeric(state_population)) |> # parse all relevant columns to numeric
  mutate( 
    state = case_when( # add state abbreviations using state.abb variable
      state_name == "Puerto Rico" ~ "PR", # use case_when to add abbreviations for DC and PR
      state_name == "District of Columbia" ~ "DC",
      TRUE ~ state.abb[match(state_name, state.name)] # default
    )
  ) 
  
population
```

7.  As a check, make a barplot of states' 2021 and 2022 populations. Show the state names in the y-axis ordered by population size. Hint: You will need to use `reorder` and use `facet_wrap`.

```{r}
population |> 
  mutate(state = reorder(state, state_population, FUN = mean)) |> # reorder state
  ggplot(aes(state, state_population)) + # assign aesthetic mapping
    geom_col() + # use geom_col to plot barplot
    coord_flip() + # flip coordinates
    facet_wrap(~year) + # facet by year
    labs(
      title = "State Population: 2020 vs 2021",
      x = "State", 
      y = "Population"
    ) + 
    theme(
      axis.text.y = element_text(size = 3), # make state names smaller so they don't overlap 
      panel.spacing = unit(2, "lines") # put more space between the graphs
      ) 
```

8.  The following URL:

```{r}
url <- "https://github.com/datasciencelabs/2025/raw/refs/heads/main/data/regions.json"
```

points to a JSON file that lists the states in the 10 Public Health Service (PHS) defined by CDC. We want to add these regions to the `population` dataset. To facilitate this create a data frame called `regions` that has two columns `state_name`, `region`, `region_name`. One of the regions has a long name. Change it to something shorter.

```{r}
#| message: false
#| warning: false
library(jsonlite)
library(purrr)
url <- "https://github.com/datasciencelabs/2025/raw/refs/heads/main/data/regions.json"

response <- request(url) |>
  req_perform() 

# check response status 
if (resp_status(response) == 200) {
  response |>
  resp_body_string() |>
  fromJSON() -> regions # use jsonlit JSON parser 
} else {
  stop(paste("request failed with, status:", resp_status(resp)))
}
  

regions <- regions |>
  unnest(states) |> # creates row for each state
  mutate(region = map_int(region, 1)) |> # pulls out region number from list of length 1
  select(state_name = states, region = region, region_name = region_name) # reordering and renaming 

regions$region_name[regions$region_name == "New York and New Jersey, Puerto Rico, Virgin Islands"] <- "NY & NJ, PR, VI"
head(regions, 20)
```

9.  Add a region and region name columns to the `population` data frame.

```{r}
population <- population |>
  left_join(regions, by = "state_name") 

head(population, 10)
```

10. From reading <https://data.cdc.gov/> we learn the endpoint `https://data.cdc.gov/resource/pwn4-m3yp.json` provides state level data from SARS-COV2 cases. Use the **httr2** tools you have learned to download this into a data frame. Is all the data there? If not, comment on why.

```{r}
api <- "https://data.cdc.gov/resource/pwn4-m3yp.json"

response <- request(api) |>
  req_perform() 

# check response status 
if (resp_status(response) == 200) {
  response |>
  resp_body_json(simplifyVector = TRUE) -> cases_raw
} else {
  stop(paste("request failed with, status:", resp_status(resp)))
}

head(cases_raw, 10)
dim(cases_raw)
```

The data is not all there. There should be data for every state, for every week for 3 years. This table only has 1000 rows due to the default API limit.

We see exactly 1,000 rows. We should be seeing over $52 \times 3$ rows per state.

11. The reason you see exactly 1,000 rows is because CDC has a default limit. You can change this limit by adding `$limit=10000000000` to the request. Rewrite the previous request to ensure that you receive all the data. Then wrangle the resulting data frame to produce a data frame with columns `state`, `date` (should be the end date) and `cases`. Make sure the cases are numeric and the dates are in `Date` ISO-8601 format.

```{r}
api <- "https://data.cdc.gov/resource/pwn4-m3yp.json"

response <- request(api) |>
  req_url_query(
    `$limit` = 10000000000 # bypasses default limit 
  ) |>
  req_perform() 

# check response status 
if (resp_status(response) == 200) {
  response |>
  resp_body_json(simplifyVector = TRUE) -> cases_raw
} else {
  stop(paste("request failed with, status:", resp_status(resp)))
}

cases <- cases_raw |>
  select(state = state, date = end_date, cases = new_cases) |> # reorder and rename columns
  mutate(cases = as.numeric(cases), date = as.Date(date)) # proper data types 

head(cases, 10)
dim(cases)
```

12. For 2020 and 2021, make a time series plot of cases per 100,000 versus time for each state. Stratify the plot by region name. Make sure to label you graph appropriately.

```{r}
cases |> 
  filter(date >= as.Date("2020-01-01") & date <= as.Date("2021-12-31")) |> # filter for 2020-2021
  left_join(population, by = "state") |>
  filter(year(date) == year) |> # removes duplicate rows, only keeps the row that has correct cases$date and population$year combo
  mutate(per_100000 = cases/state_population*100000) |> # makes new column of cases per 100,000
  
  group_split(region_name) |> # stratify by region name 
  map(~ggplot(.x, aes(x=date, y=per_100000, colour = state)) + 
    geom_line() + 
    labs(
      title = paste("New Covid-19 Cases in the", unique(.x$region_name), "Region"),
      y = "New COVID-19 Cases per 100,000 People", 
      x = "Date"
      )) 
```

13. The dates in the `cases` dataset are stored as character strings. Use the **lubridate** package to properly parse the `date` column, then create a summary table showing the total COVID-19 cases by month and year for 2020 and 2021. The table should have columns for year, month (as month name), and total cases across all states. Order by year and month. Use the **knitr** package and `kable()` function to display the results as a formatted table.

```{r}
library(knitr)
cases |>
  filter(date >= as.Date("2020-01-01") & date <= as.Date("2021-12-31")) |> # filter for 2020-2021
  mutate(month = month(date), year = year(date)) |> # correct data types
  group_by(year, month) |>
  summarise(total_cases = sum(cases),.groups = "drop") |>
  mutate(month = month.name[month]) |> # get month names from number 
  kable(caption = "New Nationwide COVID-19 Cases by Month")
```

14. The following URL provides additional COVID-19 data from the CDC in JSON format:

```{r}
deaths_url <- "https://data.cdc.gov/resource/9bhg-hcku.json"

```

Use **httr2** to download COVID-19 death data from this endpoint. Make sure to remove the default limit to get all available data. Create a clean dataset called `deaths` with columns `state`, `date`, and `deaths` (renamed from the original column name). Ensure dates are in proper Date format and deaths are numeric.

```{r}
response <- request(deaths_url) |>
  req_url_query(
    `$limit` = 10000000000
  ) |>
  req_perform() 
  
# check response status 
if (resp_status(response) == 200) {
  response |>
  resp_body_json(simplifyVector = TRUE) -> deaths
} else {
  stop(paste("request failed with, status:", resp_status(resp)))
}
  
deaths <- deaths |>
  filter(sex == "All Sexes" & age_group == "All Ages" & group == "By Total") |> # only use totals 
  select(state = state, date = end_date, deaths = covid_19_deaths) |>
  mutate(date = as.Date(date), deaths = as.numeric(deaths))

head(deaths,10)
```

15. Using the `deaths` dataset you created, make a bar plot showing the total COVID-19 deaths by state. Show only the top 10 states with the highest death counts. Order the bars from highest to lowest and use appropriate labels and title.

```{r}
deaths |>
  filter(state != "United States" & state != "New York City") |> # exclude non-states 
  arrange(desc(deaths)) |> # sort before taking top 10 
  head(10) |>
  ggplot(aes(x=reorder(state,-deaths), y=deaths, fill=state)) + # reorder sorts in the plot 
    geom_col() + 
    labs(
      title = "States with Highest COVID-19 Mortality",
      x = "State",
      y = "Deaths"
    ) + 
    theme(axis.text.x = element_text(size = 6), # make state names smaller so they don't overlap, 
          legend.position = "none") # drop legend
  
```
